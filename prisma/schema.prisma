// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid()) //can use autoincrement insted of uuid()
  email          String          @unique
  age            Int
  name           String 
  role           Role            @default(BASIC)
  // largeNumber    BigInt
  preferences    Json?  // ? means optional
  posts          Post[]          @relation("posts") // one use can have multiple post one to many relation
  favPosts       Post[]          @relation("favposts")
  userPreference userPreference? //one to one relation

  @@unique([age, name]) //two users cannot have same age and name. This is decalred in block level
  @@index([email, name]) //index helps to find by query
}

model Post {
  id            String     @id @default(uuid())
  title         String
  rating        Float
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  author        User       @relation("posts", fields: [authorId], references: [id]) //authorid id same as id of user
  favouriteBy   User?      @relation("favposts", fields: [favouriteById], references: [id]) //authorid id same as id of user
  authorId      String
  favouriteById String?
  categories    Catagory[] //many to manyy

  // @@id([title,authorId]) //this two combines to make a id insted to using id field
}

// many to many relation
model Catagory {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]
}

// one to one relation
model userPreference {
  id           String  @id @default(uuid())
  emailUpdates Boolean
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique
}

enum Role {
  BASIC
  ADMIN
  EDITOR
}
